# Смотрим информацию о используемых Volume внутри контейнера
docker image inspect mongo
docker image inspect mongo --format "{{.Config.Volumes}}"

# Создаём Volumes
docker volume create storage
docker volume create config

# Создаём контейнер
docker container run -d -v storage:/data/db -v config:/data/configdb -p 27017:27017 mongo

# Создаём контейнер с флагом вольюма ro
docker container run -d -v storage:/data/db:ro -v config:/data/configdb -p 27017:27017 mongo

# БД не может записать данные:
# 2019-05-02T17:30:38.521+0000 I STORAGE  [initandlisten] exception in initAndListen: DBPathInUse: 
#Unable to create/open the lock file: /data/db/mongod.lock (Unknown error). 
#Ensure the user executing mongod is the owner of the lock file and has the appropriate permissions. 
#Also make sure that another mongod instance is not already running on the /data/db directory, terminating
# 2019-05-02T17:30:38.521+0000 I NETWORK  [initandlisten] shutdown: going to close listening sockets...

# Создаём Volume с лейблом
docker volume create --name storage --label maintainer='Lectrum LLC' --label used_for='mongo db storage'

# Создаём Volume в TMPFS
docker volume create --driver local \
    --opt type=tmpfs \
    --opt device=tmpfs \
    --opt o=size=100m \
    storage

# Создаём контейнер с подключением Volume через Mount
docker container run -d --mount type=volume,source=storage,target=/usr/share/nginx/html --name webhost nginx:alpine

# Создаём контейнер с монтированием каталога в readonly
docker container run -d \
    --mount type=bind,source="$(pwd)"/html,target=/usr/share/nginx/html,readonly \
    --publish 80:80 \
    --name webhost nginx:alpine

# Создаём контейнер с монтированием файлов	
docker container run -d \
    --mount type=bind,source="$(pwd)"/index.html,target=/usr/share/nginx/html/index.html \
    --mount type=bind,source="$(pwd)"/about.html,target=/usr/share/nginx/html/about.html \
    --publish 80:80 \
    --name webhost nginx:alpine	

# Создаём контейнер с монтированием в TMPFS
docker run -d \
	-it \
	--name webhost \
	--mount type=tmpfs,destination=/app,tmpfs-size=100m \
	nginx:alpine

